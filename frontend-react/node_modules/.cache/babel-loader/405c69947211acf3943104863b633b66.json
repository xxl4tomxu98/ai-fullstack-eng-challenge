{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ReactComponent as Search } from \"@svgr/webpack?-svgo,+titleProp,+ref!./Search.svg\";\n\nconst App = () => {\n  _s();\n\n  const [term, setTerm] = useState('movie');\n  const [movieData, setMovieData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(3);\n\n  const updateTerm = e => {\n    setTerm(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    searchMovies(term);\n  };\n\n  const searchMovies = async term => {\n    const res = await fetch(`/search/${term}`);\n\n    if (res.ok) {\n      const data = await res.json();\n      setMovieData(data);\n      return data;\n    }\n\n    throw res;\n  };\n\n  const fetchMovieData = async () => {\n    const res = await fetch('/test');\n\n    if (res.ok) {\n      const data = await res.json();\n      setMovieData(data);\n      return data;\n    }\n\n    throw res;\n  };\n\n  const handleClick = e => {\n    setCurrentPage(Number(e.target.innerHTML));\n  };\n\n  useEffect(() => {\n    //fetchMovieData();\n    searchMovies(\"movie\");\n  }, [term]); // sort searched movies by release_year desc\n\n  movieData.sort(function (a, b) {\n    const keyA = a.release_year;\n    const keyB = b.release_year;\n    consoloe.log(keyA, keyB); // Compare the 2 dates\n\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n    return 0;\n  }); // Logic for displaying pagination\n\n  const indexOfLastPage = currentPage * perPage;\n  const indexOfFirstPage = indexOfLastPage - perPage;\n  const currentMovies = movieData.slice(indexOfFirstPage, indexOfLastPage);\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(movieData.length / perPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello, My Full Stack Challenge.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"grid--cell fl-grow1 searchbar px12 js-searchbar \",\n      autoComplete: \"off\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ps-relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateTerm,\n          type: \"text\",\n          name: \"search\",\n          value: term,\n          maxLength: \"200\",\n          placeholder: \"Search Posts\",\n          className: \"s-input s-input__search js-search-field \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: pageNumbers.fill().map((number, index) => {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-testid\": \"page-button\",\n            onClick: handleClick,\n            children: index + 1\n          }, \"page-button-\" + index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 23\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"results\",\n        children: currentMovies.map((movie, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            \"data-testid\": \"result-row\",\n            children: [movie.title, \" \", movie.genres]\n          }, \"title-\" + index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 23\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(movieData, undefined, '  ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"LcIcLUl4B2QB5cJG8+unyKHkM3E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/site/src/App.js"],"names":["React","useState","useEffect","App","term","setTerm","movieData","setMovieData","currentPage","setCurrentPage","perPage","setPerPage","updateTerm","e","target","value","handleSubmit","preventDefault","searchMovies","res","fetch","ok","data","json","fetchMovieData","handleClick","Number","innerHTML","sort","a","b","keyA","release_year","keyB","consoloe","log","indexOfLastPage","indexOfFirstPage","currentMovies","slice","pageNumbers","i","Math","ceil","length","push","display","fill","map","number","index","movie","title","genres","JSON","stringify","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ReactComponent as Search } from './Search.svg';\n\nconst App = () => {\n\n    const [term, setTerm] = useState('movie');\n    const [movieData, setMovieData] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [perPage, setPerPage] = useState(3);\n\n    const updateTerm = (e) => {\n      setTerm(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      searchMovies(term);\n    }\n\n    const searchMovies = async (term) => {\n        const res = await fetch(`/search/${term}`)\n        if (res.ok) {\n            const data = await res.json();\n            setMovieData(data);\n            return data;\n        }\n        throw res;\n    }\n\n\n    const fetchMovieData = async () => {\n      const res = await fetch('/test')\n        if (res.ok) {\n            const data = await res.json();\n            setMovieData(data);\n            return data;\n        }\n        throw res;\n    }\n\n    const handleClick = (e) => {\n        setCurrentPage(Number(e.target.innerHTML));\n    }\n\n    useEffect(() => {\n        //fetchMovieData();\n        searchMovies(\"movie\");\n    }, [term]);\n\n    // sort searched movies by release_year desc\n    movieData.sort(function(a, b) {\n      const keyA = a.release_year;\n      const keyB = b.release_year;\n      consoloe.log(keyA, keyB)\n      // Compare the 2 dates\n      if (keyA < keyB) return -1;\n      if (keyA > keyB) return 1;\n      return 0;\n    });\n    // Logic for displaying pagination\n    const indexOfLastPage = currentPage * perPage;\n    const indexOfFirstPage = indexOfLastPage - perPage;\n    const currentMovies = movieData.slice(indexOfFirstPage, indexOfLastPage);\n\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(movieData.length / perPage); i++) {\n        pageNumbers.push(i);\n    }\n\n\n    return (\n        <div className=\"App\">\n          <h1>Hello, My Full Stack Challenge.</h1>\n          <form onSubmit={handleSubmit} className=\"grid--cell fl-grow1 searchbar px12 js-searchbar \" autoComplete=\"off\">\n              <div className=\"ps-relative\">\n                  <input\n                    onChange={updateTerm}\n                    type=\"text\"\n                    name=\"search\"\n                    value={term}\n                    maxLength=\"200\"\n                    placeholder=\"Search Posts\"\n                    className=\"s-input s-input__search js-search-field \"\n                  />\n                  <input type=\"submit\" value=\"\" style={{display: 'none'}} />\n\n                  <Search/>\n              </div>\n          </form>\n          <div>\n              <div className=\"pagination\">\n                  {pageNumbers.fill().map((number, index) =>   {\n                    return (\n                      <button data-testid=\"page-button\" key={\"page-button-\" + index} onClick={handleClick}>{index+1}</button>\n                    )\n                  })}\n              </div>\n\n              <ul className=\"results\">\n                  {currentMovies.map((movie, index) => {\n                    return (\n                      <li key={\"title-\" + index} data-testid=\"result-row\">{movie.title} {movie.genres}</li>\n                    )\n                  })}\n              </ul>\n          </div>\n\n          <pre>{JSON.stringify(movieData, undefined, '  ')}</pre>\n\n        </div>\n    );\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}